0.45, 0.45, 0.45)
text(cex=1, x= x_axis, y=-0.0065, my_data$Variable, xpd=TRUE, srt=45)
x <- barplot(my_data$Average)
x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
0.45, 0.45, 0.45)
text(cex=1, x= x_axis, y=-0.0065, my_data$Variable, xpd=TRUE, srt=60)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
0.45, 0.45, 0.45)
text(cex=1, x= x_axis, y=-0.007, my_data$Variable, xpd=TRUE, srt=60)
text(cex=1, x= x_axis, y=-0.007, my_data$Variable, xpd=TRUE, srt=60, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
0.45, 0.45, 0.45)
text(cex=1, x= x_axis, y=-0.007, my_data$Variable, xpd=TRUE, srt=60, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
0.45, 0.45, 0.45)
text(cex=1, x= x_axis, y=0, my_data$Variable, xpd=TRUE, srt=60, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
0.45, 0.45, 0.45)
text(cex=1, x= x_axis, y=0.02, my_data$Variable, xpd=TRUE, srt=60, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
0.45, 0.45, 0.45)
text(cex=1, x= x_axis, y=-0.02, my_data$Variable, xpd=TRUE, srt=60, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
0.45, 0.45, 0.45)
text(cex=1, x= x_axis, y=-0.002, my_data$Variable, xpd=TRUE, srt=60, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
0.45, 0.45, 0.45)
text(cex=1, x= x_axis, y=-0.001, my_data$Variable, xpd=TRUE, srt=60, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
0.45, 0.45, 0.45)
text(cex=1, x= -0.45, y=-0.001, my_data$Variable, xpd=TRUE, srt=60, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
# x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
#                 0.45, 0.45, 0.45)
text(cex=1, x= -0.45, y=-0.001, my_data$Variable, xpd=TRUE, srt=60, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
# x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
#                 0.45, 0.45, 0.45)
text(cex=1, x= -0.45, y=-0.001, my_data$Variable, xpd=TRUE, srt=60, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
# x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
#                 0.45, 0.45, 0.45)
text(cex=1, x= x - 0.45, y=-0.001, my_data$Variable, xpd=TRUE, srt=60, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
# x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
#                 0.45, 0.45, 0.45)
text(cex=1, x= x - 0.35, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
# x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
#                 0.45, 0.45, 0.45)
text(cex=1, x= x - 0.25, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
# x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
#                 0.45, 0.45, 0.45)
text(cex=1, x= x - 0.1, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
# x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
#                 0.45, 0.45, 0.45)
text(cex=1, x= x - 0.8, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
# x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
#                 0.45, 0.45, 0.45)
text(cex=1, x= x - 0.08, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
# x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
#                 0.45, 0.45, 0.45)
text(cex=1, x= x - 0.05, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
# x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
#                 0.45, 0.45, 0.45)
text(cex=1, x= x - 0.02, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
# x_axis <- x - c(0.5, 0.45, 0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,0.45, 0.45,
#                 0.45, 0.45, 0.45)
text(cex=1, x= x, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
x <- barplot(my_data$Average)
axis(side=1, at=seq(0, 0.04, by = 0.01))
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average)
axis(side=2, at=seq(0, 0.04, by = 0.01))
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average, axes = F)
axis(side=2, at=seq(0, 0.04, by = 0.01))
text(cex=1, x = x, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average, axes = F, ylim = (0,0.4))
axis(side=2, at=seq(0, 0.04, by = 0.01))
text(cex=1, x = x, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average, axes = F, ylim = c(0,0.4))
axis(side=2, at=seq(0, 0.04, by = 0.01))
text(cex=1, x = x, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average, axes = F, ylim = c(0,0.4))
axis(side=2, at=seq(0, 0.04, by = 0.01))
text(cex=1, x = x, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average, axes = F, ylim = c(0,0.04))
axis(side=2, at=seq(0, 0.04, by = 0.01))
text(cex=1, x = x, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
my_data <- read.csv("figure5_data.csv")
tiff("Plot3.tiff", width = 10, height = 4, units = 'in', res = 1000)
my_data <- my_data[1:15, ]
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average, axes = F, ylim = c(0,0.04))
axis(side=2, at=seq(0, 0.04, by = 0.01))
text(cex=1, x = x, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
dev.off()
my_data <- read.csv("figure5_data.csv")
tiff("figure5.tiff", width = 10, height = 4, units = 'in', res = 1000)
my_data <- my_data[1:15, ]
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average, axes = F, ylim = c(0,0.04))
axis(side=2, at=seq(0, 0.04, by = 0.01))
text(cex=1, x = x, y=-0.001, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
dev.off()
my_data <- read.csv("figure5_data.csv")
tiff("figure5.tiff", width = 10, height = 4, units = 'in', res = 1000)
my_data <- my_data[1:15, ]
par(mai = c(1.4,0.5,0.5,0.1))
x <- barplot(my_data$Average, axes = F, ylim = c(0,0.04))
axis(side=2, at=seq(0, 0.04, by = 0.01))
text(cex=1, x = x, y=-0.002, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
dev.off()
my_data <- read.csv("figure5_data.csv")
tiff("figure5.tiff", width = 10, height = 4, units = 'in', res = 1000)
my_data <- my_data[1:15, ]
par(mai = c(1.3,0.5,0.3,0.05))
x <- barplot(my_data$Average, axes = F, ylim = c(0,0.04))
axis(side=2, at=seq(0, 0.04, by = 0.01))
text(cex=1, x = x, y=-0.002, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
dev.off()
par(mai = c(1.3,0.5,0.3,0.01))
x <- barplot(my_data$Average, axes = F, ylim = c(0,0.04))
axis(side=2, at=seq(0, 0.04, by = 0.01))
text(cex=1, x = x, y=-0.002, my_data$Variable, xpd=TRUE, srt = 45, adj = 1)
dev.off()
library("rjson")
install.packages("rjson")
library("rjson")
my_data <- fromJSON(file = "C:\Users\rgurlek\Desktop\yelp_dataset")
my_data <- fromJSON(file = "C:/Users/rgurlek/Desktop/yelp_dataset")
install.packages("jsonlite")
install.packages("spotifyr")
library("spotifyr")
Sys.setenv(SPOTIFY_CLIENT_ID = '26399552a8ce4d1285397254189cac50')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'fdacfffa2dd34dbeb127dedb459f7ea3')
access_token <- get_spotify_access_token()
access_token <- get_spotify_access_token()
get_my_playlists()
get_track("spotify:track:6ndmKwWqMozN2tcZqzCX4K")
install.packages("installr")
library(installr)
R.version.string
updateR()
R.version.string
install.packages("knitr")
library(dplyr)
library(sf)
# rest_data contains a list of restaurant clusters around
# a border point. It is generated by collect_rest_data.R
rest_data <- readRDS("rest_data.rds")
rest_data[[1]]
get_stats <- function(x){
n_obs <-  nrow(x)
has_price <- !is.na(x$price)
n_has_price <- sum(has_price)
# do not include rests without price to into stats
x <- x[has_price, ]
if(nrow(x) == 0) return(rep(NA, 5)) # change 5 to the return's length if needed
states <- data.frame(table(x$state))
names(states) <- c("State", "Count")
n_states <- nrow(states)
# make the state with most rest your focal state
focal <- as.character(states[which.max(states$Count), "State"])
x$is_focal <- x$state == focal
n_focal <- sum(x$is_focal)
n_nonfocal <- sum(!x$is_focal)
return(c(n_obs, n_has_price, n_states, n_focal, n_nonfocal))
}
cluster_stats <- sapply(rest_data, get_stats)
cluster_stats <- t(cluster_stats)
colnames(cluster_stats) <- c("n_obs", "n_has_price", "n_states", "n_focal",
"n_nonfocal")
apply(cluster_stats, 2, summary)
n_nonfocal_count <- table(cluster_stats[, "n_nonfocal"])
n_nonfocal <- as.numeric(names(n_nonfocal_count))
n_nonfocal_count[n_nonfocal >= 5] %>% sum()
# subset the clusters with at least 5 nonfocal rest
has_5 <- cluster_stats[, "n_nonfocal"] >= 5
has_5 <- ifelse(is.na(has_5), F, has_5)
data_list <- rest_data[has_5]
subset_stats <- sapply(data_list, get_stats)
subset_stats <- t(subset_stats)
colnames(subset_stats) <- c("n_obs", "n_has_price", "n_states", "n_focal",
"n_nonfocal")
apply(subset_stats, 2, summary)
sum(subset_stats[, "n_focal"]) # number of observations to be used in the analysis
# read tax data
tax_rates <- do.call(rbind,
lapply(list.files(path = "./TAXRATES_ZIP5",
pattern = "*.csv",
full.names = T),
read.csv, header = T,
colClasses = c(ZipCode = "character")))
names(tax_rates) <- str_remove(names(tax_rates), "Estimated")
tax_rates <- tax_rates[, c("ZipCode", "StateRate", "CountyRate", "CityRate",
"SpecialRate", "CombinedRate")]
reg_data <- data.frame()
for(i in 1:length(data_list)){
cluster <- data_list[[i]]
has_price <- !is.na(cluster$price)
cluster <- cluster[has_price, ]
price_dic <- 1:4
names(price_dic) <- c("$", "$$", "$$$", "$$$$")
cluster$price <- price_dic[cluster$price]
# merge with taxes
cluster <- merge(cluster, tax_rates, by.x = "zip_code", "ZipCode",
all.x = T)
# make the state with most rest your focal state
states <- data.frame(table(cluster$state))
names(states) <- c("State", "Count")
focal <- as.character(states[which.max(states$Count), "State"])
cluster$is_focal <- cluster$state == focal
# split the data and make both sf objects
focal <- st_as_sf(cluster[cluster$is_focal == T, ],
coords = c("longitude", "latitude"))
nonfocal <- st_as_sf(cluster[cluster$is_focal == F, ],
coords = c("longitude", "latitude"))
st_crs(focal) <- 4326
st_crs(nonfocal) <- 4326
dist_mat <- st_distance(focal, nonfocal) # rows: Focal, columns: nonFocal
dimnames(dist_mat) <- list(focal$id, nonfocal$id)
dist_mat <- dist_mat / rowSums(dist_mat, na.rm = T)
# Subset dataframes and convert to matrix
st_geometry(focal) <- NULL
focal_mat <- as.matrix(focal[, c("review_count", "rating", "price", "StateRate",
"CountyRate", "CityRate", "SpecialRate",
"CombinedRate")])
rownames(focal_mat) <- focal$id
st_geometry(nonfocal) <- NULL
nonfocal_mat <- as.matrix(nonfocal[, c("review_count", "rating", "price", "StateRate",
"CountyRate", "CityRate", "SpecialRate",
"CombinedRate")])
rownames(nonfocal_mat) <- nonfocal$id
# demean the variables
focal_mat <- focal_mat - dist_mat %*% nonfocal_mat
focal_mat <- data.frame(focal_mat)
focal_mat$cluster <- names(data_list)[i]
reg_data <- rbind(reg_data, focal_mat)
}
summary(reg_data)
cor(reg_data[complete.cases(reg_data), sapply(reg_data, is.numeric)])
head(reg_data)
library(AER)
model <- lm(rating ~ StateRate + CountyRate + CityRate + SpecialRate,
data = reg_data)
summary(model)
model <- lm(rating ~ review_count + price, data = reg_data)
summary(model)
model <- ivreg(rating ~ review_count + price + I(price^2)| review_count + StateRate +
CountyRate + CityRate + SpecialRate, data = reg_data)
summary(model)
model <- ivreg(rating ~ review_count + price| review_count + CombinedRate,
data = reg_data)
summary(model)
model <- lm(price ~ CombinedRate, data = reg_data)
summary(model) # How do tax and price are negatively correlated. Reconsider your
# demaining approach. Does it change the interpretation?
setwd("C:/Users/rgurlek/Desktop/yelp")
library(dplyr)
library(sf)
# rest_data contains a list of restaurant clusters around
# a border point. It is generated by collect_rest_data.R
rest_data <- readRDS("rest_data.rds")
rest_data[[1]]
get_stats <- function(x){
n_obs <-  nrow(x)
has_price <- !is.na(x$price)
n_has_price <- sum(has_price)
# do not include rests without price to into stats
x <- x[has_price, ]
if(nrow(x) == 0) return(rep(NA, 5)) # change 5 to the return's length if needed
states <- data.frame(table(x$state))
names(states) <- c("State", "Count")
n_states <- nrow(states)
# make the state with most rest your focal state
focal <- as.character(states[which.max(states$Count), "State"])
x$is_focal <- x$state == focal
n_focal <- sum(x$is_focal)
n_nonfocal <- sum(!x$is_focal)
return(c(n_obs, n_has_price, n_states, n_focal, n_nonfocal))
}
cluster_stats <- sapply(rest_data, get_stats)
cluster_stats <- t(cluster_stats)
colnames(cluster_stats) <- c("n_obs", "n_has_price", "n_states", "n_focal",
"n_nonfocal")
apply(cluster_stats, 2, summary)
n_nonfocal_count <- table(cluster_stats[, "n_nonfocal"])
n_nonfocal <- as.numeric(names(n_nonfocal_count))
n_nonfocal_count[n_nonfocal >= 5] %>% sum()
# subset the clusters with at least 5 nonfocal rest
has_5 <- cluster_stats[, "n_nonfocal"] >= 5
has_5 <- ifelse(is.na(has_5), F, has_5)
data_list <- rest_data[has_5]
subset_stats <- sapply(data_list, get_stats)
subset_stats <- t(subset_stats)
colnames(subset_stats) <- c("n_obs", "n_has_price", "n_states", "n_focal",
"n_nonfocal")
apply(subset_stats, 2, summary)
sum(subset_stats[, "n_focal"]) # number of observations to be used in the analysis
# read tax data
tax_rates <- do.call(rbind,
lapply(list.files(path = "./TAXRATES_ZIP5",
pattern = "*.csv",
full.names = T),
read.csv, header = T,
colClasses = c(ZipCode = "character")))
names(tax_rates) <- str_remove(names(tax_rates), "Estimated")
tax_rates <- tax_rates[, c("ZipCode", "StateRate", "CountyRate", "CityRate",
"SpecialRate", "CombinedRate")]
reg_data <- data.frame()
for(i in 1:length(data_list)){
cluster <- data_list[[i]]
has_price <- !is.na(cluster$price)
cluster <- cluster[has_price, ]
price_dic <- 1:4
names(price_dic) <- c("$", "$$", "$$$", "$$$$")
cluster$price <- price_dic[cluster$price]
# merge with taxes
cluster <- merge(cluster, tax_rates, by.x = "zip_code", "ZipCode",
all.x = T)
# make the state with most rest your focal state
states <- data.frame(table(cluster$state))
names(states) <- c("State", "Count")
focal <- as.character(states[which.max(states$Count), "State"])
cluster$is_focal <- cluster$state == focal
# split the data and make both sf objects
focal <- st_as_sf(cluster[cluster$is_focal == T, ],
coords = c("longitude", "latitude"))
nonfocal <- st_as_sf(cluster[cluster$is_focal == F, ],
coords = c("longitude", "latitude"))
st_crs(focal) <- 4326
st_crs(nonfocal) <- 4326
dist_mat <- st_distance(focal, nonfocal) # rows: Focal, columns: nonFocal
dimnames(dist_mat) <- list(focal$id, nonfocal$id)
dist_mat <- dist_mat / rowSums(dist_mat, na.rm = T)
# Subset dataframes and convert to matrix
st_geometry(focal) <- NULL
focal_mat <- as.matrix(focal[, c("review_count", "rating", "price", "StateRate",
"CountyRate", "CityRate", "SpecialRate",
"CombinedRate")])
rownames(focal_mat) <- focal$id
st_geometry(nonfocal) <- NULL
nonfocal_mat <- as.matrix(nonfocal[, c("review_count", "rating", "price", "StateRate",
"CountyRate", "CityRate", "SpecialRate",
"CombinedRate")])
rownames(nonfocal_mat) <- nonfocal$id
# demean the variables
focal_mat <- focal_mat - dist_mat %*% nonfocal_mat
focal_mat <- data.frame(focal_mat)
focal_mat$cluster <- names(data_list)[i]
reg_data <- rbind(reg_data, focal_mat)
}
summary(reg_data)
cor(reg_data[complete.cases(reg_data), sapply(reg_data, is.numeric)])
head(reg_data)
library(AER)
model <- lm(rating ~ StateRate + CountyRate + CityRate + SpecialRate,
data = reg_data)
summary(model)
model <- lm(rating ~ review_count + price, data = reg_data)
summary(model)
model <- ivreg(rating ~ review_count + price + I(price^2)| review_count + StateRate +
CountyRate + CityRate + SpecialRate, data = reg_data)
summary(model)
model <- ivreg(rating ~ review_count + price| review_count + CombinedRate,
data = reg_data)
summary(model)
model <- lm(price ~ CombinedRate, data = reg_data)
summary(model) # How do tax and price are negatively correlated. Reconsider your
# demaining approach. Does it change the interpretation?
library(dplyr)
library(sf)
library(stringr)
# rest_data contains a list of restaurant clusters around
# a border point. It is generated by collect_rest_data.R
rest_data <- readRDS("rest_data.rds")
rest_data[[1]]
get_stats <- function(x){
n_obs <-  nrow(x)
has_price <- !is.na(x$price)
n_has_price <- sum(has_price)
# do not include rests without price to into stats
x <- x[has_price, ]
if(nrow(x) == 0) return(rep(NA, 5)) # change 5 to the return's length if needed
states <- data.frame(table(x$state))
names(states) <- c("State", "Count")
n_states <- nrow(states)
# make the state with most rest your focal state
focal <- as.character(states[which.max(states$Count), "State"])
x$is_focal <- x$state == focal
n_focal <- sum(x$is_focal)
n_nonfocal <- sum(!x$is_focal)
return(c(n_obs, n_has_price, n_states, n_focal, n_nonfocal))
}
cluster_stats <- sapply(rest_data, get_stats)
cluster_stats <- t(cluster_stats)
colnames(cluster_stats) <- c("n_obs", "n_has_price", "n_states", "n_focal",
"n_nonfocal")
apply(cluster_stats, 2, summary)
n_nonfocal_count <- table(cluster_stats[, "n_nonfocal"])
n_nonfocal <- as.numeric(names(n_nonfocal_count))
n_nonfocal_count[n_nonfocal >= 5] %>% sum()
# subset the clusters with at least 5 nonfocal rest
has_5 <- cluster_stats[, "n_nonfocal"] >= 5
has_5 <- ifelse(is.na(has_5), F, has_5)
data_list <- rest_data[has_5]
subset_stats <- sapply(data_list, get_stats)
subset_stats <- t(subset_stats)
colnames(subset_stats) <- c("n_obs", "n_has_price", "n_states", "n_focal",
"n_nonfocal")
apply(subset_stats, 2, summary)
sum(subset_stats[, "n_focal"]) # number of observations to be used in the analysis
# read tax data
tax_rates <- do.call(rbind,
lapply(list.files(path = "./TAXRATES_ZIP5",
pattern = "*.csv",
full.names = T),
read.csv, header = T,
colClasses = c(ZipCode = "character")))
names(tax_rates) <- str_remove(names(tax_rates), "Estimated")
tax_rates <- tax_rates[, c("ZipCode", "StateRate", "CountyRate", "CityRate",
"SpecialRate", "CombinedRate")]
reg_data <- data.frame()
for(i in 1:length(data_list)){
cluster <- data_list[[i]]
has_price <- !is.na(cluster$price)
cluster <- cluster[has_price, ]
price_dic <- 1:4
names(price_dic) <- c("$", "$$", "$$$", "$$$$")
cluster$price <- price_dic[cluster$price]
# merge with taxes
cluster <- merge(cluster, tax_rates, by.x = "zip_code", "ZipCode",
all.x = T)
# make the state with most rest your focal state
states <- data.frame(table(cluster$state))
names(states) <- c("State", "Count")
focal <- as.character(states[which.max(states$Count), "State"])
cluster$is_focal <- cluster$state == focal
# split the data and make both sf objects
focal <- st_as_sf(cluster[cluster$is_focal == T, ],
coords = c("longitude", "latitude"))
nonfocal <- st_as_sf(cluster[cluster$is_focal == F, ],
coords = c("longitude", "latitude"))
st_crs(focal) <- 4326
st_crs(nonfocal) <- 4326
dist_mat <- st_distance(focal, nonfocal) # rows: Focal, columns: nonFocal
dimnames(dist_mat) <- list(focal$id, nonfocal$id)
dist_mat <- dist_mat / rowSums(dist_mat, na.rm = T)
# Subset dataframes and convert to matrix
st_geometry(focal) <- NULL
focal_mat <- as.matrix(focal[, c("review_count", "rating", "price", "StateRate",
"CountyRate", "CityRate", "SpecialRate",
"CombinedRate")])
rownames(focal_mat) <- focal$id
st_geometry(nonfocal) <- NULL
nonfocal_mat <- as.matrix(nonfocal[, c("review_count", "rating", "price", "StateRate",
"CountyRate", "CityRate", "SpecialRate",
"CombinedRate")])
rownames(nonfocal_mat) <- nonfocal$id
# demean the variables
focal_mat <- focal_mat - dist_mat %*% nonfocal_mat
focal_mat <- data.frame(focal_mat)
focal_mat$cluster <- names(data_list)[i]
reg_data <- rbind(reg_data, focal_mat)
}
summary(reg_data)
cor(reg_data[complete.cases(reg_data), sapply(reg_data, is.numeric)])
head(reg_data)
library(AER)
factor(reg_data$price)
hist(reg_data$price)
hist(reg_data$review_count)
summary(reg_data)
